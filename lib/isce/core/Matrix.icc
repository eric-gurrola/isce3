//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_CORE_MATRIX_ICC)
#error "Matrix.icc is an implementation detail of class Matrix"
#endif

/** Default constructor */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix() : _nrows{0}, _ncols{0}, _owner{false}, _grid{nullptr} {}

// Constructor with number of rows and number of columns 
/** @param[in] nrows Number of rows 
  * @param[in] ncols Number of columns */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(size_t nrows, size_t ncols) : 
    _nrows{nrows}, 
    _ncols{ncols}, 
    _buffer{new cell_t[nrows*ncols]},
    _owner{true},
    _grid{nullptr} {}

// Deep copy constructor - allocates memory and copies values 
/** @param[in] m isce::core::Matrix object to copy */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(const Matrix<cell_t> & m) :
    _nrows{m.length()},
    _ncols{m.width()},
    _buffer{new cell_t[_nrows*_ncols]},
    _owner{true},
    _grid{nullptr} {
    std::copy(m.data(), m.data() + _nrows*_ncols, _buffer);
}

// Shallow copy constructor - does not allocate its own memory 
/** @param[in] m isce::core::Matrix object to copy */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(Matrix<cell_t> & m) :
    _nrows{m.length()},
    _ncols{m.width()},
    _buffer{m.data()},
    _owner{false},
    _grid{nullptr} {}

// Copy constructor from a grid view (copy values) 
/** @param[in] view pyre::grid_t::view_type to copy from */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(const view_t & view) : _grid{nullptr} {
    // Set the shape from the view
    auto shape = view.layout().shape();
    _nrows = shape[0];
    _ncols = shape[1];
    // Allocate memory
    _owner = true;
    _buffer = new cell_t[_nrows*_ncols];
    // Copy values
    std::copy(view.begin(), view.end(), _buffer);
}

// Shallow copy constructor from a raw pointer - does not allocate own memory
/** @param[in] data Valarray containing data
  * @param[in] ncols Number of columns for data (assume row major packing) */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(cell_t * data, size_t nrows, size_t ncols) :
    _nrows{nrows},
    _ncols{ncols},
    _buffer{data},
    _owner{false},
    _grid{nullptr} {}

// Shallow copy constructor from an std::valarray - does not allocate own memory
/** @param[in] data Valarray containing data
  * @param[in] ncols Number of columns for data (assume row major packing) */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(std::valarray<cell_t> & data, size_t ncols) :
    _nrows{data.size() / ncols},
    _ncols{ncols},
    _buffer{&data[0]},
    _owner{false},
    _grid{nullptr} {}

// Shallow copy constructor from an std::vector - does not allocate own memory
/** @param[in] data Vector containing data
  * @param[in] ncols Number of columns for data (assume row major packing) */
template <typename cell_t>
isce::core::Matrix<cell_t>::
Matrix(std::vector<cell_t> & data, size_t ncols) :
    _nrows{data.size() / ncols},
    _ncols{ncols},
    _buffer{data.data()},
    _owner{false},
    _grid{nullptr} {}

/** Destructor */
template <typename cell_t>
isce::core::Matrix<cell_t>::
~Matrix() {
    // If I allocated memory myself, delete it
    if (_owner) {
        delete [] _buffer;
    }
    // If I allocated a grid pointer, delete it
    if (_grid) {
        delete _grid;
    }
}

// Deep assignment operator - allocates memory and copies values 
/** @param[in] m isce::core::Matrix object to copy */
template <typename cell_t>
isce::core::Matrix<cell_t> &
isce::core::Matrix<cell_t>::
operator=(const Matrix<cell_t> & m) {
    // Resize my storage
    resize(m.length(), m.width());
    // Copy values
    std::copy(m.data(), m.data() + _nrows*_ncols, _buffer);
    // Reset grid pointer
    _resetGrid();
    return *this;
}

// Shallow assignment operator - does not allocate its own memory 
/** @param[in] m isce::core::Matrix object to copy */
template <typename cell_t>
isce::core::Matrix<cell_t> &
isce::core::Matrix<cell_t>::
operator=(Matrix<cell_t> & m) {
    _nrows = m.length();
    _ncols = m.width();
    _buffer = m.data();
    _owner = false;
    _resetGrid();
    return *this;
}

// Assignment operator from a grid view (copy values) 
/** @param[in] view pyre::grid_t::view_type to copy from */
template <typename cell_t>
isce::core::Matrix<cell_t> &
isce::core::Matrix<cell_t>::
operator=(const view_t & view) {
    // Set the shape from the view
    auto shape = view.layout().shape();
    _nrows = shape[0];
    _ncols = shape[1];
    // Allocate memory
    _owner = true;
    _buffer = new cell_t[_nrows*_ncols];
    // Copy values
    std::copy(view.begin(), view.end(), _buffer);
    // Reset grid pointer
    _resetGrid();
    return *this;
}

// Resize memory for a given number of rows and columns (no value initialization)
/** @param[in] nrows Number of rows 
  * @param[in] ncols Number of columns */
template <typename cell_t>
void
isce::core::Matrix<cell_t>::
resize(size_t nrows, size_t ncols) {

    // If I have already allocated memory, delete it first
    if (_owner) {
        delete [] _buffer;
    }

    // Allocate new memory and save shape
    _nrows = nrows;
    _ncols = ncols;
    _buffer = new cell_t[_nrows * _ncols];
    _owner = true;

    // Reset grid pointer
    _resetGrid();
}

// Extract copy of sub-matrix given starting indices and span
/** @param[in] row Starting row of submatrix
  * @param[in] col Starting column of submatrix
  * @param[in] rowspan Number of rows of submatrix
  * @param[in] colspan Number of columns of submatrix */
template <typename cell_t>
const typename isce::core::Matrix<cell_t>::view_t
isce::core::Matrix<cell_t>::
submat(size_t row, size_t col, size_t rowspan, size_t colspan) {

    // Allocate grid pointer for my data
    _resetGrid();
    const shape_t shape{_nrows, _ncols};
    _grid = new grid_t{{shape}, &_buffer[0]};
    
    // Create slice
    const index_t low = {row, col};
    const index_t high = {row + rowspan, col + colspan};
    const packing_t packing{1ul, 0ul};
    const slice_t slice = {low, high, packing};

    // Return a view
    return _grid->view(slice);
}

/** Access to data buffer */
template <typename cell_t>
cell_t *
isce::core::Matrix<cell_t>::
data() {
    return _buffer;
}

/** Read-only access to data buffer */
template <typename cell_t>
const cell_t *
isce::core::Matrix<cell_t>::
data() const {
    return _buffer;
}

/** Access to data buffer at specific row */
template <typename cell_t>
cell_t *
isce::core::Matrix<cell_t>::
rowptr(size_t row) {
    // Make a view pointing to row
    auto view = submat(row, 0, 1, 1);
    // Return pointer
    return &(*view.begin());
}

/** Read-only access to data buffer at specific row */
template <typename cell_t>
const cell_t *
isce::core::Matrix<cell_t>::
rowptr(size_t row) const {
    // Make a view pointing to row
    auto view = submat(row, 0, 1, 1);
    // Return pointer
    return &(*view.begin());
}

// Access matrix value for a given row and column 
/** @param[in] row Row coordinate to access
  * @param[in] col Column coordinate to access */
template <typename cell_t>
cell_t &
isce::core::Matrix<cell_t>::
operator()(size_t row, size_t col) {
    return _buffer[row*_ncols + col];
}

// Read-only access to matrix value for a given row and column
/** @param[in] row Row coordinate to access
  * @param[in] col Column coordinate to access */
template <typename cell_t>
const cell_t &
isce::core::Matrix<cell_t>::
operator()(size_t row, size_t col) const {
    return _buffer[row*_ncols + col];
}

// Access matrix value for a flattened index
/** @param[in] index Flattened index to access */
template <typename cell_t>
cell_t &
isce::core::Matrix<cell_t>::
operator()(size_t index) {
    return _buffer[index];
}

// Read-only access to matrix value for a flattened index
/** @param[in] index Flattened index to access */
template <typename cell_t>
const cell_t &
isce::core::Matrix<cell_t>::
operator()(size_t index) const {
    return _buffer[index];
}

// Access matrix value for a given grid::index_type 
/** @param[in] index pyre::grid_t::index_type for coordinate */
template <typename cell_t>
cell_t &
isce::core::Matrix<cell_t>::
operator[](const index_t & index) {
    // Create grid for my data
    shape_t shape{_nrows, _ncols};
    grid_t grid{{shape}, &_buffer[0]};
    // Pass it an index
    return grid[index];
}

// Read-only access to matrix value for a given grid::idnex_type
/** @param[in] index pyre::grid_t::index_type for coordinate */
template <typename cell_t>
const cell_t &
isce::core::Matrix<cell_t>::
operator[](const index_t & index) const {
    // Create grid for my data
    shape_t shape{_nrows, _ncols};
    grid_t grid{{shape}, &_buffer[0]};
    // Pass it an index
    return grid[index];
}

// Fill with zeros
template <typename cell_t>
void
isce::core::Matrix<cell_t>::
zeros() {
    for (size_t i = 0; i < _nrows * _ncols; ++i) {
        _buffer[i] = 0.0;
    }
}

// Fill with a constant value
template <typename cell_t>
void
isce::core::Matrix<cell_t>::
fill(cell_t value) {
    for (size_t i = 0; i < _nrows * _ncols; ++i) {
        _buffer[i] = value;
    }
}

/** Get shape information as grid::shape_type */
template <typename cell_t>
typename isce::core::Matrix<cell_t>::shape_t
isce::core::Matrix<cell_t>::
shape() const {
    return {_nrows, _ncols};
}

/** Get matrix width */
template <typename cell_t>
size_t
isce::core::Matrix<cell_t>::
width() const {
    return _ncols;
}

/** Get matrix length */
template <typename cell_t>
size_t
isce::core::Matrix<cell_t>::
length() const {
    return _nrows;
}

/** Get matrix byte offset for row and column for raw binary buffer */
template <typename cell_t>
typename isce::core::Matrix<cell_t>::shape_t
isce::core::Matrix<cell_t>::
byteoffset() const {
    size_t unitsize = sizeof(cell_t);
    return { _ncols * unitsize, unitsize}; 
}

// Reset grid pointer for matrix views
template <typename cell_t>
void 
isce::core::Matrix<cell_t>::
_resetGrid() {
    if (_grid) {
        delete _grid;
    }
    _grid = nullptr;
}

// end of file
