//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Source Author: Bryan Riel
// Copyright 2017-2018
//

#if !defined(ISCE_CORE_LUT1D_ICC)
#error "LUT1d.icc is an implementation detail of class LUT1d"
#endif

// Constructor from an LUT2d (values averaged in y-direction)
/** @param[in] lut2d LUT2d to copy data from */
template <typename T>
isce::core::LUT1d<T>::
LUT1d(const isce::core::LUT2d<T> & lut2d) {

    // Check if LUT2d has actual data; if not, just store reference value
    if (!lut2d.haveData()) {
        _haveData = false;
        _refValue = lut2d.refValue();
        return;
    }

    // Get a reference to the LUT2d data
    const isce::core::Matrix<T> & data = lut2d.data();

    // Initialize working valarrays for computing mean along y-direction
    std::valarray<double> values(lut2d.width()), count(lut2d.width());
    values = 0.0;
    count = 0.0;

    // Compute sum along columns (y-direction)
    for (size_t i = 0; i < lut2d.length(); ++i) {
        for (size_t j = 0; j < lut2d.width(); ++j) {
            values[j] += data(i,j);
            count[j] += 1.0;
        }
    }

    // Compute final coordinates and values
    std::valarray<double> coords(lut2d.width());
    for (size_t j = 0; j < lut2d.width(); ++j) {
        coords[j] = lut2d.xStart() + j * lut2d.xSpacing();
        values[j] /= count[j];
    }

    // Save results
    _coords = coords;
    _values = values;
    _extrapolate = true;
    _haveData = true;
    _refValue = lut2d.refValue();
}

// Assignment operator from an LUT2d (values averaged in y-direction)
/** @param[in] lut2d LUT2d to copy data from */
template <typename T>
isce::core::LUT1d<T> &
isce::core::LUT1d<T>::
operator=(const LUT2d<T> & lut2d) {

    // Check if LUT2d has actual data; if not, just store reference value
    if (!lut2d.haveData()) {
        _haveData = false;
        _refValue = lut2d.refValue();
        return *this;
    }

    // Get a reference to the LUT2d data 
    const isce::core::Matrix<T> & data = lut2d.data();
    
    // Initialize working valarrays for computing mean along y-direction
    std::valarray<double> values(lut2d.width()), count(lut2d.width());
    values = 0.0;
    count = 0.0;
    
    // Compute sum along columns (y-direction)
    for (size_t i = 0; i < lut2d.length(); ++i) {
        for (size_t j = 0; j < lut2d.width(); ++j) {
            values[j] += data(i,j);
            count[j] += 1.0;
        }
    }
    
    // Compute final coordinates and values
    std::valarray<double> coords(lut2d.width());
    for (size_t j = 0; j < lut2d.width(); ++j) {
        coords[j] = lut2d.xStart() + j * lut2d.xSpacing();
        values[j] /= count[j];
    }
    
    // Save results
    _coords = coords;
    _values = values;
    _extrapolate = true;
    return *this;
}

// Convert to an LUT2d
template <typename T>
isce::core::LUT2d<T>
isce::core::LUT1d<T>::
toLUT2d() const {

    // Cache x-coordinates
    const double xstart = _coords[0];
    const double dx = _coords[1] - xstart;
    const double nx = _coords.size();

    // We simply replicate the LUT1d data in azimuth
    // Use 7 azimuth records to ensure enough points for interpolation kernels
    // Max time chosen to be roughly August 8, 2920
    const double ystart = 0.0;
    const double ymax = 3.0e10;
    const size_t ny = 7;
    const double dy = ymax / (ny - 1);

    // Create a Matrix with the correct size
    isce::core::Matrix<T> data(ny, nx);

    // Copy values
    for (size_t i = 0; i < ny; ++i) {
        for (size_t j = 0; j < nx; ++j) {
            data(i,j) = _values[j];
        }
    }

    // Create LUT2d and return
    isce::core::LUT2d<T> lut2d(xstart, ystart, dx, dy, data, isce::core::BILINEAR_METHOD);
    return lut2d;
}

/** @param[in] x Point to evaluate the LUT
  * @param[out] result Interpolated value */
template <typename T>
T isce::core::LUT1d<T>::
eval(double x) const {

    // Check if data are available; if not, return ref value
    T value = _refValue;
    if (!_haveData) {
        return value;
    }

    // Check bounds to see if we need to perform linear extrapolation
    const int n = _coords.size();
    if (x < _coords[0]) {
        if (_extrapolate) {
            const double dx = _coords[0] - _coords[1];
            const double dy = _values[0] - _values[1];
            const double d = x - _coords[1];
            T result = (dy / dx) * d + _values[1];
            return result;
        } else {
            pyre::journal::error_t errorChannel("isce.core.LUT1d");
            errorChannel
                << pyre::journal::at(__HERE__)
                << "Out of bounds evaluation for LUT1d."
                << pyre::journal::newline
                << pyre::journal::endl;
            return 0;
        }
    } else if (x > _coords[n-1]) {
        if (_extrapolate) {
            const double dx = _coords[n-1] - _coords[n-2];
            const double dy = _values[n-1] - _values[n-2];
            const double d = x - _coords[n-2];
            T result = (dy / dx) * d + _values[n-2];
            return result;
        } else {
            pyre::journal::error_t errorChannel("isce.core.LUT1d");
            errorChannel
                << pyre::journal::at(__HERE__)
                << "Out of bounds evaluation for LUT1d."
                << pyre::journal::newline
                << pyre::journal::endl;
            return 0;
        }
    }

    // Otherwise, proceed with interpolation
    // Binary search to find leftmost coordinate
    int low = 0;
    int high = _coords.size();
    while (low < high) {
        const int midpoint = (low + high) / 2;
        if (_coords[midpoint] < x) {
            low = midpoint + 1;
        } else {
            high = midpoint;
        }
    }

    // Check search convergence
    if (low != high) {
        pyre::journal::error_t errorChannel("isce.core.LUT1d");
        errorChannel
            << pyre::journal::at(__HERE__)
            << "Binary search did not converge."
            << pyre::journal::newline
            << pyre::journal::endl;
        return 0;
    }

    // Check if right on top of a coordinate
    if (std::abs(_coords[high] - x) < 1.0e-12) {
        return _values[high];
    }

    // The indices of the x bounds
    const int j0 = high - 1;
    const int j1 = high;
    
    // Get coordinates at bounds
    double x1 = _coords[j0];
    double x2 = _coords[j1];

    // Interpolate
    T result = (x2 - x) / (x2 - x1) * _values[j0] + (x - x1) / (x2 - x1) * _values[j1];
    return result;
}

// end of file
