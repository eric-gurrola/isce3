// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 2003-2018 all rights reserved
//

// code guard
#if !defined(isce_srtm_Tile_icc)
#error This header file contains implementation details of class isce::srtm::Tile
#endif


// meta-methods
isce::srtm::Tile::
Tile(const void * rawdata, int arcsecondsPerPixel) :
    _grid {
        // the tile
        {{3600/arcsecondsPerPixel+1, 3600/arcsecondsPerPixel+1}, {1u, 0u}},
        // the storage
        { rawdata } }
{
    // make a channel
    pyre::journal::debug_t channel("isce.srtm");
    // and if it is active
    if (channel) {
        // show me
        channel
            << pyre::journal::at(__HERE__)
            << "buffer: " << rawdata << pyre::journal::newline
            << "sizeof(data_type): " << sizeof(data_type)
            << pyre::journal::endl;
    }
}


// interface
auto
isce::srtm::Tile::
shape() const {
    // easy enough...
    return _grid.layout();
}


auto
isce::srtm::Tile::
get(index_type index) const {
    // and get the value; don't forget that the SRTM payload is in network order, which may be
    // different from the endianness of the current host
    data_type value = ntohs(_grid[index]);

    // make a channel
    pyre::journal::debug_t channel("isce.srtm");
    // and if it is active
    if (channel) {
        // show me
        channel
            << pyre::journal::at(__HERE__)
            << "data[ (" << index << ") ]"
            << " = "
            << value
            << pyre::journal::endl;
    }

    // get and return the data stored at that location
    return value;
}


// syntactic sugar
auto
isce::srtm::Tile::
operator[](index_type index) const {
    // delegate to the method
    return get(index);
}


// end of file
