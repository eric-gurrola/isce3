//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_GEOMETRY_GEO2RDR_ICC)
#error "Geo2rdr.icc is an implementation detail of class Geo2rdr"
#endif

/** @param[in] product Input Product
  * @param[in] frequency Frequency designation
  * @param[in] nativeDoppler Flag for using native Doppler frequencies instead of zero-Doppler
  * @param[in] numberAzimuthLooks Number of azimuth looks of input product
  * @param[in] numberRangeLooks Number of range looks of input product
  *
  * Primary constructor of Geo2rdr object. */
isce::geometry::Geo2rdr::
Geo2rdr(const isce::product::Product & product,
        char frequency,
        bool nativeDoppler,
        size_t numberAzimuthLooks,
        size_t numberRangeLooks) :
        _radarGrid(product, frequency, numberAzimuthLooks, numberRangeLooks) {

    // Copy orbit and doppler
    _orbit = product.metadata().orbit();
    if (nativeDoppler) {
        _doppler = product.metadata().procInfo().dopplerCentroid(frequency);
    }

    // Make an ellipsoid manually
    _ellipsoid = isce::core::Ellipsoid(isce::core::EarthSemiMajorAxis,
                                       isce::core::EarthEccentricitySquared);
    
}

/** @param[in] ellipsoid Ellipsoid object
  * @param[in] orbit Orbit object
  * @param[in] doppler LUT1d doppler model
  * @param[in] meta Metadata object
  * @param[in] numberAzimuthLooks Number of azimuth looks of input product
  * @param[in] numberRangeLooks Number of range looks of input product
  *
  * Alternative constructor from ellipsoid, orbit, doppler, and metadata. */
isce::geometry::Geo2rdr::
Geo2rdr(const isce::core::Ellipsoid & ellipsoid, const isce::core::Orbit & orbit,
        const isce::core::LUT2d<double> & doppler, const isce::core::Metadata & meta,
        size_t numberAzimuthLooks, size_t numberRangeLooks) :
        _radarGrid(meta, orbit.refEpoch, numberAzimuthLooks, numberRangeLooks),
        _ellipsoid(ellipsoid), _orbit(orbit), _doppler(doppler) {}

/**@param[in] t Azimuth time convergence threshold in seconds*/
void isce::geometry::Geo2rdr::
threshold(double t) {
    _threshold = t;
}

/** @param[in] n Max number of Newton-Raphson iterations*/
void isce::geometry::Geo2rdr::
numiter(int n) {
    _numiter = n;
}

/** @param[in] method orbit interpolation method to use
 *
 * Set the orbit interpolation method while checking its validity*/
void isce::geometry::Geo2rdr::
orbitMethod(isce::core::orbitInterpMethod method) {

    // Check validity
    if (method == isce::core::HERMITE_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 4 state vectors for using "
                << "hermite polynomial interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::SCH_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 4 state vectors for using "
                << "SCH interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::LEGENDRE_METHOD) {
        if (_orbit.nVectors < 9) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 9 state vectors for using "
                << "legendre polynomial interpolation."
                << pyre::journal::endl;
        }
    } else {
        pyre::journal::error_t error("isce.geometry.Geo2rdr");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Geo2rdr::orbitMethod - Undefined orbit interpolation method."
            << pyre::journal::endl;
    }

    // Save
    _orbitMethod = method;
}

