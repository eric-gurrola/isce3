//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_GEOMETRY_TOPO_ICC)
#error "Topo.icc is an implementation detail of class Topo"
#endif

/**  @param[in] product Input Product
 * 
 * Primary constructor of Topo object */
isce::geometry::Topo::
Topo(isce::product::Product & product) : _initialized(false) {

    // Cache objects from product
    isce::product::Identification id = product.metadata().identification();
    isce::radar::Radar instrument = product.metadata().instrument();
   
    // Copy mode, orbit, ellipsoid, and doppler
    _mode = product.complexImagery().primaryMode();
    _orbit = product.metadata().orbitPOE();
    _ellipsoid = id.ellipsoid();
    _doppler = instrument.skewDoppler();
    _lookSide = id.lookDirection();

    // Adjust block length based in input SLC length
    _linesPerBlock = std::min(_mode.length(), _linesPerBlock);

    // For numerical precision purposes, set reference epoch 2 days prior
    _refEpoch = _mode.startAzTime() - 86400*2;
    // Update orbit epochs with new epoch
    _orbit.updateUTCTimes(_refEpoch);

}

/** @param[in] ellipsoid Ellipsoid object
 * @param[in] orbit     Orbit object
 * @param[in] doppler   Poly2D doppler model
 * @param[in] meta      Metadata object with radar image parameters
 *
 * Alternative constructor from ellipsoid orbit and metadata.
 * Used for supporting VRT-formatted products.*/
isce::geometry::Topo::
Topo(isce::core::Ellipsoid ellipsoid, isce::core::Orbit orbit,
     isce::core::Poly2d doppler, isce::core::Metadata meta) :
    _orbit(orbit), _ellipsoid(ellipsoid), _doppler(doppler), _mode(meta),
    _initialized(false) {

    // Other data
    _lookSide = meta.lookSide;

    // Adjust block length based in input SLC length
    _linesPerBlock = std::min(_mode.length(), _linesPerBlock);

    // For numerical precision purposes, set reference epoch 2 days prior
    _refEpoch = _mode.startAzTime() - 86400*2;
    // Update orbit epochs with new epoch
    _orbit.updateUTCTimes(_refEpoch);

}

/** @param[in] flag To mark object as initialized or not */ 
void isce::geometry::Topo::
initialized(bool flag) {
    _initialized = flag;
}

/** @param[in] info Pyre journal log to write to */
void isce::geometry::Topo::
checkInitialization(pyre::journal::info_t & info) const {
    if (!_initialized) {
        pyre::journal::error_t error("isce.geometry.Topo");
        error 
            << pyre::journal::at(__HERE__)
            << "Topo options have not been set." 
            << pyre::journal::endl;
    } else {
        info
            << "Primary iterations: " << _numiter << pyre::journal::newline
            << "Secondary iterations: " << _extraiter << pyre::journal::newline
            << "Distance threshold: " << _threshold << pyre::journal::newline;
    }
}

/** @param[in] t Distance threshold to flag convergence of iterations */
void isce::geometry::Topo::
threshold(double t) {
    _threshold = t;
}

/** @param[in] n Number of primary iterations
 *
 * This is the number of iterations where solution of previous solution is directly used to initialize the next iteration*/
void isce::geometry::Topo::
numiter(int n) {
    _numiter = n;
}

/** @param[in] n Number of secondary iterations
 *
 * When we haven't converged after primary iterations, it typically means that the solver is iterating between two very close solutions. In this case, we use the previous 2 solutions and use the average to initialize the next iteration. This is equivalent to changing the step size between iterations. */
void isce::geometry::Topo::
extraiter(int n) {
    _extraiter = n;
}

/** @param[in] method orbit interpolation method to use
 *
 * Set the orbit interpolation method while checking its validity*/
void isce::geometry::Topo::
orbitMethod(isce::core::orbitInterpMethod method) {

    // Check validity
    if (method == isce::core::HERMITE_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 4 state vectors for using "
                << "hermite polynomial interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::SCH_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 4 state vectors for using "
                << "SCH interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::LEGENDRE_METHOD) {
        if (_orbit.nVectors < 9) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 9 state vectors for using "
                << "legendre polynomial interpolation."
                << pyre::journal::endl;
        }
    } else {
        pyre::journal::error_t error("isce.geometry.Topo");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Topo::orbitMethod - Undefined orbit interpolation method."
            << pyre::journal::endl;
    }

    // Save
    _orbitMethod = method;
}

/** @param[in] DEM inerpolation method 
 *
 * Set the DEM interpolation method while checking its validity*/
void isce::geometry::Topo::
demMethod(isce::core::dataInterpMethod method) {

    // Check validity
    if ((method != isce::core::SINC_METHOD) && (method != isce::core::BILINEAR_METHOD) &&
        (method != isce::core::BICUBIC_METHOD) && (method != isce::core::NEAREST_METHOD) &&
        (method != isce::core::AKIMA_METHOD) && (method != isce::core::BIQUINTIC_METHOD)) {
        pyre::journal::error_t error("isce.geometry.Topo");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Topo::demMethod - Unsupported DEM interpolation method"
            << pyre::journal::endl;
    }

    // Save
    _demMethod = method;
}

/** @param[in] epsgcode EPSG code of desired pixel-by-pixel outputs
 *
 * Set the EPSG code of the output layers and configure projection. See <a href="raster.html#rasterproj">here</a> for supported projections. */
void isce::geometry::Topo::
epsgOut(int epsgcode) {
    // Save the code
    _epsgOut = epsgcode;
    // Initialize the projection
    _proj = isce::core::createProj(epsgcode);
}

// end of file
