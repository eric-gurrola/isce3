// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2018 all rights reserved
//

// code guard
#if !defined(pyre_grid_Packing_icc)
#error This header file contains implementation details of class pyre::grid::Packing
#endif


// meta-methods
template <pyre::grid::size_t dim> template <typename... argT>
pyre::grid::Packing<dim>::
Packing(argT... value) :
    _packing{value...}
{}


// interface
// factory of a c-like packing where the last index varies the fastest
template <pyre::grid::size_t dim>
constexpr auto
pyre::grid::Packing<dim>::
rowMajor() {
    // make an empty one
    rep_type packing {};
    // go through its slots
    for (size_t slot=0; slot < packing.size(); ++slot) {
        // and fill with consecutive decreasing integers
        packing[slot] = packing.size() - 1 - slot;
    }
    // all done
    return packing;
}

// the alias
template <pyre::grid::size_t dim>
constexpr auto
pyre::grid::Packing<dim>::
c() {
    // delegate
    return rowMajor();
}

// factory of a fortran-like packing where the first index varies the fastest
template <pyre::grid::size_t dim>
constexpr auto
pyre::grid::Packing<dim>::
columnMajor() {
    // make an empty one
    rep_type packing{};
    // go through its slots
    for (size_t slot=0; slot < packing.size(); ++slot) {
        // and fill with consecutive decreasing integers
        packing[slot] = slot;
    }
    // all done
    return packing;
}

// the alias
template <pyre::grid::size_t dim>
constexpr auto
pyre::grid::Packing<dim>::
fortran() {
    // delegate
    return columnMajor();
}

// dimensionality of the index
template <pyre::grid::size_t dim>
constexpr auto
pyre::grid::Packing<dim>::
size() const {
    // easy enough
    return _packing.size();
}

template <pyre::grid::size_t dim>
auto
pyre::grid::Packing<dim>::
operator[] (size_type item) const {
    // bounds check
#if defined(DEBUG_CHECK_BOUNDS)
    if (item >= size()) {
        // open a channel
        pyre::journal::firewall_t firewall("pyre.grid.bounds");
        // complain
        firewall
            << pyre::journal::at(__HERE__)
            << "index error: out of range: " << item << " > " << size()-1
            << pyre::journal::endl;

    }
#endif
    // look up the item value and return it
    return _packing[item];
}

// loops
template <pyre::grid::size_t dim>
auto
pyre::grid::Packing<dim>::
begin() const {
    // the array itself is the beginning
    return _packing.cbegin();
}


template <pyre::grid::size_t dim>
auto
pyre::grid::Packing<dim>::
end() const {
    // compute the element "one past the end"
    return _packing.cend();
}


template <pyre::grid::size_t dim>
auto &
operator<<(std::ostream & stream, const pyre::grid::Packing<dim> & packing) {
    // initialize; do it in this scope scope so we can use the iterator after the loop
    auto v = packing.begin();
    // inject up to the last coordinate
    for (; v != packing.end()-1; ++v) {
        stream << *v << ", ";
    }
    // and now the last one
    stream << *v;
    // all done
    return stream;
}


// end of file
