// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2018 all rights reserved
//

// code guard
#if !defined(pyre_grid_Iterator_icc)
#error This header file contains implementation details of class pyre::grid::Iterator
#endif


// meta-methods
template <typename sliceT>
pyre::grid::Iterator<sliceT>::
Iterator(const slice_type & slice) :
    _current(slice.low()),
    _slice(slice)
{}


template <typename sliceT>
pyre::grid::Iterator<sliceT>::
Iterator(const index_type & current, const slice_type & slice) :
    _current(current),
    _slice(slice)
{}


// interface
// access to the current value
template <typename sliceT>
const typename pyre::grid::Iterator<sliceT>::index_type &
pyre::grid::Iterator<sliceT>::
operator* () const {
    // return the current value
    return _current;
}


// value update
template <typename sliceT>
pyre::grid::Iterator<sliceT> &
pyre::grid::Iterator<sliceT>::
operator++ () {
    // get the lower limits for the slice indices
    const auto & low = _slice.low();
    // and the upper limits
    const auto & high = _slice.high();

    // pull the indices in the order specified by the slice packing
    for (auto dim : _slice.packing()) {
        // get the associated limit
        auto limit = high[dim];
        // get my current value for this component and increment it
        auto value = ++(_current[dim]);
        // if the value didn't overflow
        if (value < limit) {
            // save it
            _current[dim] = value;
            // all done
            return *this;
        }
        // otherwise, we overflowed; set this component to its starting value and grab the next one
        _current[dim] = low[dim];
    }

    // if we get this far, every component has overflowed
    _current = high;

    // all done
    return *this;
}


// operators on indices
template <typename sliceT>
auto
pyre::grid::
operator==(const Iterator<sliceT> & left, const Iterator<sliceT> & right) {
    // delegate to the standard algorithm
    return std::equal((*left).begin(), (*left).end(), (*right).begin());
}


template <typename sliceT>
auto
pyre::grid::
operator!=(const Iterator<sliceT> & left, const Iterator<sliceT> & right) {
    // easy enough
    return !(left == right);
}


// end of file
