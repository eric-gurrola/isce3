// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2018 all rights reserved
//

// code guard
#if !defined(pyre_grid_Layout_icc)
#error This header file contains implementation details of class pyre::grid::Layout
#endif


// meta-methods
template <typename indexT, typename packingT>
pyre::grid::Layout<indexT, packingT>::
Layout(shape_type shape, packing_type packing) :
    Slice<indexT, packingT> { {}, shape, packing }
{}


// interface
// accessors
template <typename indexT, typename packingT>
const auto &
pyre::grid::Layout<indexT, packingT>::
shape() const {
    // easy enough...
    return this->high();
}


// get the dimensionality of my index
template <typename indexT, typename packingT>
constexpr auto
pyre::grid::Layout<indexT, packingT>::
dim() {
    // ask my index
    return index_type::dim();
}


// compute the size of the layout
template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
size() const {
    // initialize
    size_type cells = 1;
    // go through my shape
    for (auto size : this->high()) {
        // scale up my size by the extent of this axis
        cells *= size;
    }
    // all done
    return cells;
}

// cell offset for a given index
template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
offset(const index_type & index) const {
    // initialize the offset
    size_type offset = 0;
    // and the running product
    size_type product = 1;
    // loop in packing order
    for (auto axis : this->packing()) {
        // update the offset
        offset += index[axis] * product;
        // update the product
        product *= this->high()[axis];
    }
    // all done
    return offset;
}


// index for a given cell offset
template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
index(size_type offset) const {
    // storage for the answer
    index_type index;
    // initialize the product of all the dimension extents
    auto product = size();

    // loop in reverse packing order
    for (int dim = index.size()-1; dim >=0; --dim) {
        // pull the current shape limit out of the product
        product /= this->high()[this->packing()[dim]];
        // compute the index
        index[this->packing()[dim]] = offset / product;
        // adjust the offset
        offset %= product;
    }

    // build an index and return it
    return index;
}


// the syntactic sugar
template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
operator[](const index_type & index) const {
    // delegate
    return offset(index);
}

template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
operator[](size_type offset) const {
    // delegate
    return index(offset);
}


// slicing
template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
slice(const packing_type & packing) const {
    // make a slice over the whole layout but with the given packing
    return slice_type(this->low(), this->high(), packing);
}


template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
slice(const index_type & begin, const index_type & end) const {
    // make a slice over the whole layout but with the given packing
    return slice_type(begin, end, this->packing());
}


template <typename indexT, typename packingT>
auto
pyre::grid::Layout<indexT, packingT>::
slice(const index_type & begin, const index_type & end, const packing_type & packing) const {
    // make a slice over the whole layout but with the given packing
    return slice_type(begin, end, packing);
}


// stream injection
template <typename indexT, typename packingT>
auto &
pyre::grid::
operator<< (std::ostream & stream, const pyre::grid::Layout<indexT, packingT> & layout) {
    // inject my parts into the stream
    stream << "(" << layout.high() << ") packed using (" << layout.packing() << ")";
    // all done
    return stream;
}

// end of file
