// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2018 all rights reserved
//

// code guard
#if !defined(pyre_memory_Heap_icc)
#error This header file contains implementation details of class pyre::memory::Heap
#endif


// meta-methods
template <typename cellT>
pyre::memory::Heap<cellT>::
~Heap() {
    // clean up
    ::operator delete(_buffer);
}

template <typename cellT>
pyre::memory::Heap<cellT>::
Heap(size_type size) :
    _buffer {static_cast<pointer>(::operator new(size * sizeof(cellT)))},
    _size {size}
{}

template <typename cellT>
pyre::memory::Heap<cellT>::
Heap(Heap && other) :
    _buffer {0},
    _size {0}
{
    // delegate to the move assignment operator
    *this = std::move(other);
}

template <typename cellT>
pyre::memory::Heap<cellT> &
pyre::memory::Heap<cellT>::
operator=(Heap && other) {
    // trap assignment to self
    if (this == &other) {
        // and bail
        return *this;
    }
    // if my current buffer is valid
    if (_buffer) {
        // discard the memory
        ::operator delete(_buffer);
    }
    // pilfer
    _buffer = other._buffer;
    _size = other._size;
    // invalidate the state of the source
    other._buffer = 0;
    other._size = 0;
    // make me available
    return *this;
}


// interface
// accessors
template <typename cellT>
typename pyre::memory::Heap<cellT>::size_type
pyre::memory::Heap<cellT>::
size() const {
    // easy enough
    return _size;
}

template <typename cellT>
auto
pyre::memory::Heap<cellT>::
data() const {
    // easy enough
    return _buffer;
}

// end of file
